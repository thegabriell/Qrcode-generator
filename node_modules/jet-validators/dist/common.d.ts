export type TValidateWithTransform<T> = (arg: unknown, cb?: (arg: T) => void) => arg is T;
type AddNull<T, N> = (N extends true ? T | null : T);
export type AddNullables<T, O, N> = (O extends true ? AddNull<T, N> | undefined : AddNull<T, N>);
export type AddMods<T, O, N, A> = A extends true ? AddNullables<T[], O, N> : AddNullables<T, O, N>;
export declare function orOptional<T>(cb: ((arg: unknown) => arg is T)): (arg: unknown) => arg is (T | undefined);
export declare function orNullable<T>(cb: ((arg: unknown) => arg is T)): (arg: unknown) => arg is (T | null);
export {};
