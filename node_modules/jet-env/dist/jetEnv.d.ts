interface IOptions {
    getValue?: (property: string, key?: string) => unknown;
    variableNameFormatter?: (name: string) => string;
    onError?: (property: string) => void;
}
type TFunc = (...args: any[]) => any;
type GetTypePredicate<T> = T extends (x: any) => x is infer U ? U : never;
type TValidatorFn<T> = (arg: unknown, cb?: ((transformedVal: T) => void)) => arg is T;
type RetVal<T> = {
    [K in keyof T]: (T[K] extends TFunc ? GetTypePredicate<T[K]> : T[K] extends unknown[] ? GetTypePredicate<T[K][1]> : T[K] extends object ? RetVal<T[K]> : never);
};
interface IArg {
    [key: string]: TFunc | [string, TFunc] | IArg;
}
declare function jetEnv<T extends IArg>(arg: T, optionsParam?: IOptions, namePrepend?: string): RetVal<T>;
export declare function transform<T>(transFn: TFunc, vldt: ((arg: unknown) => arg is T)): TValidatorFn<T>;
export declare const str: TValidatorFn<string>;
export declare const bool: TValidatorFn<boolean>;
export declare const num: TValidatorFn<number>;
export declare const date: TValidatorFn<Date>;
export default jetEnv;
