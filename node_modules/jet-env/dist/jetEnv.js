"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.date = exports.num = exports.bool = exports.str = void 0;
exports.transform = transform;
;
function jetEnv(arg, optionsParam, namePrepend = '') {
    if (!!arg && typeof arg !== 'object') {
        throw new Error('Argument must be an object type');
    }
    const options = Object.assign(Object.assign({}, _getDefaultOptions()), optionsParam);
    const retVal = {};
    for (const key in arg) {
        if (!_isStr(key)) {
            throw new Error('Each object key must be a string.');
        }
        const propArg = arg[key];
        let envVarVal, envVarName = namePrepend + options.variableNameFormatter(key), vldrFn;
        if (typeof propArg === 'function') {
            envVarVal = options.getValue(envVarName, key);
            vldrFn = propArg;
        }
        else if (Array.isArray(propArg)) {
            envVarName = propArg[0];
            if (!_isStr(propArg[0]) || typeof propArg[1] !== 'function') {
                throw new Error('Array must be in the format [string, function]');
            }
            envVarVal = options.getValue(envVarName, key);
            vldrFn = propArg[1];
        }
        else if (typeof propArg === 'object') {
            envVarVal = jetEnv(propArg, options, envVarName + '_');
        }
        else {
            throw new Error('Each property must be a string or an array.');
        }
        if (!!vldrFn && !vldrFn(envVarVal, (tval) => envVarVal = tval)) {
            options.onError(envVarName);
        }
        retVal[key] = envVarVal;
    }
    return retVal;
}
function transform(transFn, vldt) {
    return (arg, cb) => {
        if (arg !== undefined) {
            arg = transFn(arg);
        }
        cb === null || cb === void 0 ? void 0 : cb(arg);
        return vldt(arg);
    };
}
exports.str = transform(String, _isStr);
exports.bool = transform(_toBool, _isBool);
exports.num = transform(Number, _isNum);
exports.date = transform(_toDate, _isDate);
function _getDefaultOptions() {
    return {
        getValue: (property) => process.env[property],
        variableNameFormatter: _toSnakeCase,
        onError: _onError,
    };
}
function _toSnakeCase(str) {
    return str.split(/\.?(?=[A-Z])/).join('_').toUpperCase();
}
function _onError(envVarName) {
    throw new Error(`The environment variable "${envVarName}" was missing ` +
        'or invalid.');
}
function _isStr(arg) {
    return (typeof arg === 'string' && arg !== '');
}
function _toBool(arg) {
    if (typeof arg === 'string') {
        arg = arg.toLowerCase();
        if (arg === 'true') {
            return true;
        }
        else if (arg === 'false') {
            return false;
        }
        else if (arg === '0') {
            return false;
        }
        else if (arg === '1') {
            return true;
        }
        else if (arg === 'yes') {
            return true;
        }
        else if (arg === 'no') {
            return false;
        }
    }
    return arg;
}
function _isBool(arg) {
    return (typeof arg === 'boolean');
}
function _isNum(arg) {
    return (typeof arg === 'number' && !isNaN(arg));
}
function _toDate(arg) {
    if ((0, exports.num)(Number(arg))) {
        arg = Number(arg);
    }
    if (_isStr(arg) || _isNum(arg) || _isDate(arg)) {
        return new Date(arg);
    }
    return arg;
}
function _isDate(arg) {
    return (arg instanceof Date && !isNaN(arg.getTime()));
}
exports.default = jetEnv;
//# sourceMappingURL=jetEnv.js.map